------------------OOP----------------------
abstract class: introduce a datatype

class: introduce a variant

extends: connects a variant to a datatype


--------template method pattern & hook:-----------
//method closerToO是template
//template method pattern instance就是abstract class裡的實作method?
//而該實作method裡用到的abstract method就稱為hook?
abstract class PointD{
	int x;
	int y;

	public PointD(int _x, int _y) {
		x = _x;
		y = _y;
	}
	boolean closerToO(PointD p){
		return distanceToO() <= p.distanceToO();
	}
	abstract int distanceToO();
}
class CartesianPt extends PointD{
	public CartesianPt(int _x, int _y) {
		super(_x, _y);
	}
	@Override
	int distanceToO() {
		return (int)Math.sqrt(x*x+y*y);
	}
}
class ManhattanPt extends PointD{
	public ManhattanPt(int _x, int _y) {
		super(_x, _y);
	}
	@Override
	int distanceToO() {
		return x+y;
	}
}
--------------------public----------------------------
class Anchovy extends FishD{
  /*because the function, we want to overwrite, is in other package,
    so we have to use public*/
  public boolean equals(Object o) {return (o instanceof Anchovy);}
}

------------------equals & instanceof------------------
we have to overwrite "equals" function before we use it.
//instanceof compared obj with class; equals compared two objs.

---------------------Object class----------------------
一個新定義的class若非顯式extends other classes, 就是隱式extends Object.
故所有class都是Object的子類別, 所有new出來的物件Object都是其super class.
primitive:int(1, 6, 8...), boolean(true, false), ......, Object不是他們的super class
而從Integer, Boolean, ......, new出來的物件則是.
所以這兩者是不同的, 如5和new Integer(5)是不同的.

------------------return type-------------------------------------
Object cool() {return new Boolean(true);}
此函式回傳的是Object物件, 而不是Boolean物件,
要使用Boolean的members時, 要先將回傳的Object物件
downward cast成Boolean物件.
------------------------------------------------------------------
()>{} : Runnable
()>{return T}: Supplier<T>
(T)>{}: Consumer<T>
(T)>{return R}: Function<T,R>
我看只能接收單參數的lambda,每次傳入傳出時,都先將args壓縮成一個object,不想用curry,
或者直接使用member溝通,省去傳入參數.
Object[] scores = {88, 81, 74};
Object[][] cords = {{1, 2, 3},
            		 {4, 5, 6}};


-------------------------style-----------------------------------
//多行不可合併(只要兩者其一多行) > fields和constructor可以合併
//設定性質的可以合併

class NumArray {
    int[] m_nums;

    public NumArray(int[] nums) {
        class update {
            int[] nums; int sum = 0, size;
            public update(int[] _nums) {nums = _nums; size = _nums.length;}

            int[] help(int idx) {if (idx == size)
                                    {return nums;}
                                 else {sum = sum + nums[idx];
                                       nums[idx] = sum;
                                       return help(idx+1);}}
        }
        m_nums = new update(nums).help(0);
    }

    public int sumRange(int i, int j) {
        i = i-1;
        int head, tail = m_nums[j];

        if (i == -1)
           {head = 0;}
        else {head = m_nums[i];}

        return head-tail;
    }
}

---------------anonymous-clojure--------------------------

Object showClusure = (new Object() {int b =10000;
																	      public void call()
																	      {System.out.println ("匿名類別：");
																	        					 System.out.println ("this  ->b= " +b);
																	                   System.out.println ("main()->a= " +a);}});
//new Object()應該括號起來

exception可能寫在同一層較好,
python 我看還是用OOP寫法, 他對fp支援不夠
書中的可能不是最簡結構, 看是否能不用任何design patterns構造程序
挑EOPL幾個例子來實做
